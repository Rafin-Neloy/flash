




 // GLUT, include glu.h and gl.h





// Handler for window-repaint event. Call back when the window first appears and
void Idle()
{
    glutPostRedisplay();//// marks the current window as needing to be redisplayed
}




void display() {
    glClearColor(0,0,0,1); // Set background color to black and opaque
    glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer (background)
 glLineWidth(2);







 glBegin(GL_QUADS);
   glColor3ub(51,153,255);
     glVertex2f(-1,1);
   glVertex2f(-1,-1);
     glVertex2f(1,-1);
    glVertex2f(1,1);
     glEnd();

      glBegin(GL_LINES);
glColor3ub(102,0,51);
glVertex2f(-1,0);
glVertex2f(1,0);
glColor3ub(102,255,102);
glVertex2f(0,1);
glVertex2f(0,-1);
glEnd();




      glPushMatrix();
   glTranslatef(.6,.1,0);
    glRotatef(i,0.0,0.0,1.0);

    glBegin(GL_TRIANGLES);
    glColor3f(1.0f, 0.0f, 0.0f);
    glVertex2f(0,0);
    glVertex2f( .1,0);
    glVertex2f(.050,.01);
    glEnd();

    glPopMatrix();//while glPopMatrix pops the top matrix off the stack


    i+=0.1f;
    glLoadIdentity();

  glPushMatrix();
glTranslatef(.6,.1,0);
 glRotatef(m,0,0,1);

 glBegin(GL_TRIANGLES);
    glColor3f(1.0f, 0.0f, 0.0f);
    glVertex2f(0,0);
    glVertex2f( 0,.01);
    glVertex2f(.10,.055);
    glEnd();
     glPopMatrix();//while glPopMatrix pops the top matrix off the stack

m+=0.1f;
    glLoadIdentity();

    glPushMatrix();
glTranslatef(.6,.1,0);
 glRotatef(n,0,0,1);

 glBegin(GL_TRIANGLES);
    glColor3f(1.0f, 0.0f, 0.0f);
    glVertex2f(0,0);
    glVertex2f(-.1,0);
    glVertex2f(-.05,-.01);
    glEnd();
     glPopMatrix();//while glPopMatrix pops the top matrix off the stack

n+=0.1f;
    glLoadIdentity();







    glBegin(GL_QUADS);//windmill tree
    glColor3ub(0,51,102);
    glVertex2f(.61,.1);
    glVertex2f(.6,.1);
    glVertex2f(.6,-.1);
    glVertex2f(.61,-.1);
    glEnd();


    glBegin(GL_QUADS);//quads for watch
    glColor3ub(225,200,36);
    glVertex2f(-.2,-.250);
    glVertex2f(-.2,0);
    glVertex2f(-.4,0);
    glVertex2f(-.4,-.250);
    glEnd();


    glBegin(GL_QUADS);//quads for watch
    glColor3ub(36,168,255);
    glVertex2f(-.250,-.5);
    glVertex2f(-.350,-.5);
    glVertex2f(-.350,-.250);
    glVertex2f(-.250,-.250);
    glEnd();




 glPushMatrix();//second
glTranslatef(-.3,-.125,0);
 glRotatef(n,0,0,1);
glBegin(GL_TRIANGLES);
    glColor3ub(255,36,36);
    glVertex2f(0,0);
    glVertex2f( .1,0);
    glVertex2f(0.05,0.025);
    glEnd();
     glPopMatrix();//while glPopMatrix pops the top matrix off the stack

n+=0.3f;
    glLoadIdentity();

    glPushMatrix();//minute
glTranslatef(-.3,-.125,0);
 glRotatef(m,0,0,1);
glBegin(GL_TRIANGLES);
    glColor3ub(36,255,218);
    glVertex2f(0,0);
    glVertex2f( .1,0);
    glVertex2f(0.05,0.025);
    glEnd();
     glPopMatrix();//while glPopMatrix pops the top matrix off the stack

m+=0.0000001f;
    glLoadIdentity();



glTranslatef(-.3,-.125,0);//hour

glBegin(GL_TRIANGLES);
    glColor3ub(86,255,36);
    glVertex2f(0,0);
    glVertex2f( .05,0);
    glVertex2f(0.05,0.025);
    glEnd();



glLoadIdentity();













glBegin(GL_QUADS);//houseragul
    glColor3ub(0,51,102);
    glVertex2f(-.7,-.3);
    glVertex2f(-.5,-.3);
    glVertex2f(-.5,.0);
    glVertex2f(-.7,.0);
    glEnd();









    glBegin(GL_POLYGON);//house
    glColor3ub(0,51,102);
    glVertex2f(-.75,.0);
    glVertex2f(-.45,.0);
    glVertex2f(-.52,.13);
    glVertex2f(-.69,.13);
    glEnd();










    glBegin(GL_QUADS); //house
    glColor3ub(153,102,0);
    glVertex2f(-.63,-.25);
    glVertex2f(-.63,-.05);
    glVertex2f(-.57,-.05);
    glVertex2f(-.57,-.25);
    glEnd();


glTranslatef(.4,-.2,0);
glScalef(.8,.8,0);




glBegin(GL_QUADS);//house rahul
    glColor3ub(0,51,102);
    glVertex2f(-.7,-.3);
    glVertex2f(-.5,-.3);
    glVertex2f(-.5,.0);
    glVertex2f(-.7,.0);
    glEnd();









    glBegin(GL_POLYGON);//house
    glColor3ub(0,51,102);
    glVertex2f(-.75,.0);
    glVertex2f(-.45,.0);
    glVertex2f(-.52,.13);
    glVertex2f(-.69,.13);
    glEnd();










    glBegin(GL_QUADS); //house
    glColor3ub(153,102,0);
    glVertex2f(-.63,-.25);
    glVertex2f(-.63,-.05);
    glVertex2f(-.57,-.05);
    glVertex2f(-.57,-.25);
    glEnd();
    glLoadIdentity();




glBegin(GL_TRIANGLES);//mine tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.7);
    glVertex2f(-.8,.7);
    glVertex2f(-.85,1);
    glEnd();
    glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.4);
    glVertex2f(-.8,.4);
    glVertex2f(-.85,.6);
    glEnd();
     glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.5);
    glVertex2f(-.8,.5);
    glVertex2f(-.85,.7);
    glEnd();
 glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.6);
    glVertex2f(-.8,.6);
    glVertex2f(-.85,.8);
    glEnd();
    glBegin(GL_QUADS);//Tree
    glColor3ub(230, 138, 0);
    glVertex2f(-.840,.6);
    glVertex2f(-.860,.6);
    glVertex2f(-.860,.550);
    glVertex2f(-.840,.550);
    glEnd();



glTranslatef(.2,0,0);
glBegin(GL_TRIANGLES);//mine tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.7);
    glVertex2f(-.8,.7);
    glVertex2f(-.85,1);
    glEnd();
    glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.4);
    glVertex2f(-.8,.4);
    glVertex2f(-.85,.6);
    glEnd();
     glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.5);
    glVertex2f(-.8,.5);
    glVertex2f(-.85,.7);
    glEnd();
 glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.6);
    glVertex2f(-.8,.6);
    glVertex2f(-.85,.8);
    glEnd();
    glLoadIdentity();


glBegin(GL_QUADS);//Tree
    glColor3ub(230, 138, 0);
    glVertex2f(-.640,.6);
    glVertex2f(-.660,.6);
    glVertex2f(-.660,.550);
    glVertex2f(-.640,.550);
    glEnd();
    glBegin(GL_QUADS);//Tree
    glColor3ub(230, 138, 0);
    glVertex2f(-.640,.4);
    glVertex2f(-.660,.4);
    glVertex2f(-.660,.3);
    glVertex2f(-.640,.3);
    glEnd();


    glTranslatef(.4,0,0);
glBegin(GL_TRIANGLES);//mine tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.7);
    glVertex2f(-.8,.7);
    glVertex2f(-.85,1);
    glEnd();
    glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.4);
    glVertex2f(-.8,.4);
    glVertex2f(-.85,.6);
    glEnd();
     glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.5);
    glVertex2f(-.8,.5);
    glVertex2f(-.85,.7);
    glEnd();
 glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.6);
    glVertex2f(-.8,.6);
    glVertex2f(-.85,.8);
    glEnd();
    glLoadIdentity();

glTranslatef(.6,0,0);
glScalef(.6,.6,0);
glBegin(GL_TRIANGLES);//mine tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.7);
    glVertex2f(-.8,.7);
    glVertex2f(-.85,1);
    glEnd();
    glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.4);
    glVertex2f(-.8,.4);
    glVertex2f(-.85,.6);
    glEnd();
     glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.5);
    glVertex2f(-.8,.5);
    glVertex2f(-.85,.7);
    glEnd();
 glBegin(GL_TRIANGLES);//tree
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.6);
    glVertex2f(-.8,.6);
    glVertex2f(-.85,.8);
    glEnd();
    glLoadIdentity();




        glBegin(GL_QUADS);//Tree
    glColor3ub(230, 138, 0);
    glVertex2f(-.4,.2);
    glVertex2f(-.38,.2);
    glVertex2f(-.38,.28);
    glVertex2f(-.4,.28);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(-.44,.28);
    glVertex2f(-.34,.28);
    glVertex2f(-.39,.55);
    glEnd();
    glBegin(GL_QUADS);
    glColor3ub(230, 138, 0);
    glVertex2f(-.86,-.3);
    glVertex2f(-.84,-.3);
    glVertex2f(-.84,-.18);
    glVertex2f(-.86,-.18);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,-.18);
    glVertex2f(-.8,-.18);
    glVertex2f(-.85,.2);
    glEnd();





    glBegin(GL_QUADS);
    glColor3ub(230, 138, 0);
    glVertex2f(-.46,.2);
    glVertex2f(-.44,.2);
    glVertex2f(-.44,.28);
    glVertex2f(-.46,.28);
    glEnd();



    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(-.4,.28);
    glVertex2f(-.5,.28);
    glVertex2f(-.45,.59);
    glEnd();





    glBegin(GL_QUADS);
    glColor3ub(230, 138, 0);
    glVertex2f(-.86,.2);
    glVertex2f(-.84,.2);
    glVertex2f(-.84,.28);
    glVertex2f(-.86,.28);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(-.9,.28);
    glVertex2f(-.8,.28);
    glVertex2f(-.85,.55);
    glEnd();






    glBegin(GL_TRIANGLES);//house
    glColor3ub(0, 77, 0);
    glVertex2f(.2,.075);
    glVertex2f(.4,.075);
    glVertex2f(.3,.2);
    glEnd();
      glBegin(GL_QUADS);
   glColor3ub(226,10,2);
     glVertex2f(.4,.075);
   glVertex2f(.2,.075);
     glVertex2f(.2,-.16);
    glVertex2f(.4,-.16);
     glEnd();

        glBegin(GL_QUADS);
      glColor3ub(230, 138, 0);
    glVertex2f(.25,-.16);
    glVertex2f(.35,-.16);
    glVertex2f(.35,0);
    glVertex2f(.25,.0);
    glEnd();






  glBegin(GL_QUADS);//tree
    glColor3ub(230, 138, 0);
    glVertex2f(-.4,.2);
    glVertex2f(-.38,.2);
    glVertex2f(-.38,.28);
    glVertex2f(-.4,.28);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(-.44,.28);
    glVertex2f(-.34,.28);
    glVertex2f(-.39,.55);
    glEnd();


 glBegin(GL_QUADS);//tree near house
    glColor3ub(230, 138, 0);
    glVertex2f(.05,.1);
    glVertex2f(.06,.1);
    glVertex2f(.06,.15);
    glVertex2f(.05,.15);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(.04,.14);
    glVertex2f(.07,.14);
    glVertex2f(.055,.20);
    glEnd();



     glTranslatef(.1,0,0);
    glBegin(GL_QUADS);//tree near house
    glColor3ub(230, 138, 0);
    glVertex2f(.05,.1);
    glVertex2f(.06,.1);
    glVertex2f(.06,.15);
    glVertex2f(.05,.15);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0, 77, 0);
    glVertex2f(.04,.14);
    glVertex2f(.07,.14);
    glVertex2f(.055,.20);
    glEnd();
     glLoadIdentity();





    GLfloat a=0.8f; GLfloat b=0.8f; GLfloat radius =.1f;//SUN
	int k;
	GLfloat twicePi = 2.0f * PI;
	int triangleAmount = 20;
	glBegin(GL_TRIANGLE_FAN);
	    glColor3ub(255, 255, 102);
		glVertex2f(a, b);
		for(k = 0; k <= triangleAmount;k++) {
			glVertex2f(
		            a + (radius * cos(k *  twicePi / triangleAmount)),
			    b + (radius * sin(k * twicePi / triangleAmount))
			);
		}
	glEnd();


	glBegin(GL_QUADS);//PATH
	glColor3ub(102,153,153);
	glVertex2f(-1,-.5);
	glVertex2f(1,-.5 );
	glVertex2f(1,-.7);
	glVertex2f(-1,-.7 );


	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(102,153,153);
	 glVertex2f(.25,-.16);
    glVertex2f(.35,-.16);
	glVertex2f(.35,-7);
	glVertex2f(.25,-7 );

	glEnd();

glBegin(GL_QUADS);//river
    glColor3ub(36,168,255);
    glVertex2f(.7,.2);
    glVertex2f(.7,-1);
    glVertex2f(1,-1);
    glVertex2f(1,.6);
    glEnd();


    glBegin(GL_QUADS);//boat
    glColor3ub(216,37,198);
    glVertex2f(.7,-.2);
    glVertex2f(.750,-.3);
    glVertex2f(.9,-.3);
    glVertex2f(.950,-.2);
    glEnd();

     glBegin(GL_QUADS);//boat
    glColor3ub(168,216,37);
    glVertex2f(.9,-.2);
    glVertex2f(.750,-.2);
    glVertex2f(.750,-.150);
    glVertex2f(.9,-.150);
    glEnd();

























    glFlush();
}



int main(int argc, char** argv)
{
    glutInit(&argc, argv);          // Initialize GLUT
    glutInitWindowSize(320, 320);
    glutCreateWindow("Model Transform");
    glutDisplayFunc(display);//
    glutIdleFunc(Idle);
    glutPostRedisplay();//glutIdleFunc sets the global idle callback to be func so a GLUT program can perform background processing tasks or continuous animation when window system events are not being received.
    glutMainLoop();
    return 0;
}




